#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const int HALL_SENSOR_PIN = 2;

volatile int revolutions = 0;
volatile unsigned long lastInterruptTime = 0; 
volatile unsigned long lastRevolutionTime = 0; 
unsigned long lastDisplayUpdate = 0;
const unsigned long motionTimeout = 5000;
const unsigned long displayUpdateInterval = 1000; // Update display every 1 second
boolean isSpinning = false;

// Set the LCD address
#define I2C_ADDR    0x27

// Set the number of columns and rows of the LCD
#define LCD_COLUMNS 16
#define LCD_ROWS    2

// Initialize the LiquidCrystal_I2C library
LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLUMNS, LCD_ROWS);

void setup() {
  Serial.begin(9600);
  pinMode(HALL_SENSOR_PIN, INPUT);

  // Initialize the LCD
  lcd.init();
  // Turn on the backlight (if supported)
  lcd.backlight();

  attachInterrupt(digitalPinToInterrupt(HALL_SENSOR_PIN), magnet_detect, RISING);
}

void loop() {
  unsigned long currentTime = millis();

  if (currentTime - lastRevolutionTime < motionTimeout) {
    isSpinning = true;
  } else {
    isSpinning = false;
  }

  if (currentTime - lastDisplayUpdate >= displayUpdateInterval) {
    lastDisplayUpdate = currentTime;

    noInterrupts(); // Temporarily disable interrupts for a safe read
    int revs = revolutions;
    unsigned long timeSinceLastRev = currentTime - lastRevolutionTime;
    interrupts(); // Re-enable interrupts

    float rpm = 0;
    if (timeSinceLastRev > 0) {
      rpm = 60000.0 / timeSinceLastRev; // Calculate RPM
    }

    // Print to LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("RPM: ");
    lcd.print(rpm);
    lcd.setCursor(0, 1);
    lcd.print("Total Revs: ");
    lcd.print(revs);

    // Print to Serial Monitor for debugging
    Serial.print("RPM: ");
    Serial.print(rpm);
    Serial.print(" | Total Revs: ");
    Serial.println(revs);
  }
}

void magnet_detect() {
  unsigned long interruptTime = millis();

  if (interruptTime - lastInterruptTime > 10) { // Debounce
    revolutions++;
    lastInterruptTime = interruptTime;
    lastRevolutionTime = interruptTime;
    Serial.println("Revolution detected");
  }
}
